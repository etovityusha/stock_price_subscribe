version: "3.7"

services:
  db:
    image: postgres:14.3
    restart: always
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    command: [
      "postgres",
      "-c", "port=${POSTGRES_PORT}"
    ]
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}", "-p", "${POSTGRES_PORT}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_MANAGEMENT_PORT_NUMBER=${RABBITMQ_MANAGEMENT_PORT_NUMBER}
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "${RABBITMQ_MANAGEMENT_PORT_NUMBER}:${RABBITMQ_MANAGEMENT_PORT_NUMBER}"

  redis:
    image: redis:6.2
    env_file: .env
    volumes:
      - /var/lib/redis:/data
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    command:
      [
        "redis-server",
        "--port", "${REDIS_PORT}",
        "--appendonly", "yes",
        "--dir", "/data",
        "--dbfilename", "dump.rdb",
        "--requirepass", "${REDIS_PASSWORD}"
      ]

  migrator:
    build: .
    env_file: .env
    volumes:
      - .:/app
    depends_on:
      - db
    command: alembic upgrade head

  bot:
    build: .
    env_file: .env
    volumes:
      - .:/app
    depends_on:
      - db
      - migrator
      - rabbitmq
    networks:
      - default
    command: python tg_bot.py

  celery:
    build: .
    env_file: .env
    volumes:
      - .:/app
    depends_on:
      - db
      - rabbitmq
    command: celery -A worker worker -B -l INFO

  web:
    build: .
    env_file: .env
    volumes:
      - .:/app
    depends_on:
      - bot
    command: uvicorn web:app --host 0.0.0.0 --port 8000
    ports:
      - '8000:8000'


volumes:
  postgres_data: