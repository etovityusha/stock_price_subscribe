[tool.mypy]
python_version = "3.10"
plugins = ["pydantic.mypy"]
namespace_packages = false
explicit_package_bases = false
ignore_missing_imports = true
follow_imports_for_stubs = false
strict_optional = false
strict = true

show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true
error_summary = true

warn_no_return = true
warn_return_any = true
warn_unreachable = true
disable_error_code = [
    "attr-defined",
    "has-type",
    "misc",
    "no-untyped-def",
    "type-arg",
    "no-any-return"
]

exclude = ["env", "venv"]

[tool.ruff]
exclude = [".git", "__pycache__", "venv", "env", "dist", "build", "migrations"]
line-length = 120
target-version = "py310"
select = ["ALL"]
ignore = [
    "D102",
    "COM812",
    "RUF001",
    "D103",
    "EM102",
    "G004",
    "D104", # Missing docstring in public package
    "TCH002", # Move third-party import `sqlalchemy.orm.Session` into a type-checking block
    "D101", # Missing docstring in public class
    "ANN204", # Missing return type annotation for special method `__call__`
    "D107", # Missing docstring in `__init__`
    "ANN101", # Missing type annotation for `self` in method
    "ANN202", # Missing return type annotation for private function `create_appointment`
    "D100", # Missing docstring in public module
    "TCH001", # Move application import `models.db` into a type-checking block
    "ARG004", # Unused static method argument: `user_id`
    "ANN001", # Missing type annotation for function argument `exc_tb`
    "UP032", # Use f-string instead of `format` call
    "ANN003", # Missing type annotation for `**kwargs
    "ARG002", # Unused method argument: `now`
    "RET501", # Do not explicitly `return None` in function if it is the only possible return value
    "RET504", # Unnecessary variable assignment before `return` statement
    "ANN201", # Missing return type annotation for public function `assert_contains`
    "TID252", # Relative imports from parent modules are banned
    "SLF001", # Private member accessed: `i_s._get_all_items`
    "RET505", # Unnecessary `else` after `return` statement
    "TRY003", # Avoid specifying long messages outside the exception class
    "EM101", # Exception must not use a string literal, assign to variable first
    "RET506", # Unnecessary `elif` after `raise` statement
    "D205", # 1 blank line required between summary line and description
    "D212", # Multi-line docstring summary should start at the first line
    "D400", # First line should end with a period
    "D415", # First line should end with a period, question mark, or exclamation point
    "RUF002", # Docstring contains ambiguous unicode character 'а' (did you mean 'a'?)
    "C408", # Unnecessary `dict` call (rewrite as a literal)
    "TRY002", # Create your own exception
    "C901", # `post` is too complex (11)
    "TRY301", # Abstract `raise` to an inner function
    "TRY300", # Consider moving this statement to an `else` block
    "BLE001", # Do not catch blind exception: `Exception`
    "N805", # First argument of a method should be named `self`
    "INP001", # File `worker.py` is part of an implicit namespace package. Add an `__init__.py`.
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `f`
    "UP008", # Use `super()` instead of `super(__class__, self)`
    "TCH003", # Move standard library import `uuid.UUID` into a type-checking block
    "ANN002", # Missing type annotation for `*args`
    "ANN206", # Missing return type annotation for classmethod `check_user_deleting`
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ARG003", # Unused class method argument: `kwargs`
    "N818", # Exception name `NotVerifiedInstructors` should be named with an Error suffix
    "UP007", # Use `X | Y` for type annotations
    "UP006", # Use `tuple` instead of `Tuple` for type annotations
    "UP004", # Class `QueryCounter` inherits from `object`
    "PLR0913", # Too many arguments to function call (6/5)
    "FBT002", # Boolean default value in function definition
    "FBT001", # Boolean positional arg in function definition
    "A002", # Argument `input` is shadowing a python builtin
    "ANN205", # Missing return type annotation for staticmethod `payment_with_schedule`
    "D401", # First line of docstring should be in imperative mood: "Decorator are used to attach any models to sqlalchemy db session."
    "D209", # Multi-line docstring closing quotes should be on a separate line
    "PLR2004", # Magic value used in comparison, consider replacing 202 with a constant variable
    "B904", # Within an except clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    "TRY200", # Use `raise from` to specify exception cause
    "ERA001", # Found commented-out code
    "B905", # `zip()` without an explicit `strict=` parameter
    "A001", # Variable `input` is shadowing a python builtin
    "S324", # Probable use of insecure hash functions in `hashlib`: "md5"
    "TRY400", # Use `logging.exception` instead of `logging.error`
    "A003", # Class attribute `input` is shadowing a python builtin
    "D106", # Missing docstring in public nested class
    "PLE0604", # Invalid object in `__all__`, must contain only strings
    "DTZ006", # The use of `datetime.datetime.fromtimestamp()` without `tz` argument is not allowed
    "D419", # Docstring is empty
    "FBT003", # Boolean positional value in function call
    "ISC001", # Implicitly concatenated string literals on one line
    "D200", # One-line docstring should fit on one line
    "TRY201", # Use `raise` without specifying exception name
    "DTZ012", # The use of `datetime.date.fromtimestamp()` is not allowed, use `datetime.datetime.fromtimestamp(ts, tz=).date()` instead
    "DTZ004", # The use of `datetime.datetime.utcfromtimestamp()` is not allowed, use `datetime.datetime.fromtimestamp(ts, tz=)` instead
    "SIM108", # Use ternary operator `address_id = body["address_id"] if lesson.category == CategoryEnum.B else slot.instructor.address_id` instead of if-else-block
    "RUF003", # Comment contains ambiguous unicode character 'у' (did you mean 'y'?)
    "RSE102", # Unnecessary parentheses on raised exception
    "COM819", # Trailing comma prohibited
    "RUF100", # Unused blanket `noqa` directive
    "UP011", # Unnecessary parameters to `functools.lru_cache`
    "S108", # Probable insecure usage of temporary file or directory: "/tmp/celerybeat-schedule"
    "TRY004", # Prefer `TypeError` exception for invalid type
    "UP035", # Import from `collections.abc` instead: `Callable`
    "S113", # Probable use of requests call without timeout
    "D406", # Section name should end with a newline ("Raises")
    "D202", # No blank lines allowed after function docstring (found 1)
    "D407", # Missing dashed underline after section ("Example")
    "PGH004", # Use specific rule codes when using `noqa`
    "N801", # Class name `onlineCheckDTO` should use CapWords convention
    "N815", # Variable `onlineCheck` in class scope should not be mixedCase
    "DTZ007", # The use of `datetime.datetime.strptime()` without %z must be followed by `.replace(tzinfo=)` or `.astimezone()`
    "ISC003", # Explicitly concatenated string should be implicitly concatenated
    "T201", # `print` found
    "PTH123", # `open("foo")` should be replaced by `Path("foo").open()`
    "PTH107", # `os.remove` should be replaced by `.unlink()`
    "B024", # `Recognizer` is an abstract base class, but it has no abstract methods
    "B027", # `PushNotifier.send` is an empty method in an abstract base class, but has no abstract decorator
    "S105", # Possible hardcoded password: "sometoken"
    "B009", # Do not call `getattr` with a constant attribute value. It is not any safer than normal property access.
    "D105", # Missing docstring in magic method
    "C401", # Unnecessary generator (rewrite as a `set` comprehension)
    "C416", # Unnecessary `list` comprehension (rewrite using `list()`)
    "D402", # First line should not be the function's signature
    "EXE001", # Shebang is present but file is not executable
    "PGH003", # Use specific rule codes when ignoring type issues
    "B010", # Do not call `setattr` with a constant attribute value. It is not any safer than normal property access.
    "D403", # First word of the first line should be properly capitalized
    "ARG005", # Unused lambda argument: `x`
    "PIE790", # Unnecessary `pass` statement
    "SIM210", # Use `bool(obj and obj.test_started)` instead of `True if obj and obj.test_started else False`
    "N806", # Variable `TaskBase` in function should be lowercase
    "B007", # Loop control variable `idx` not used within loop body
    "SIM212", # Use `result if result else None` instead of `None if not result else result`
    "N804", # First argument of a class method should be named `cls`
    "S101", # Use of `assert` detected
    "PT001", # Use `@pytest.fixture()` over `@pytest.fixture`
    "PT004", # Fixture `checklist_template` does not return anything, add leading underscore
    "ARG001", # Unused function argument: `code`
    "PT013", # Found incorrect import of pytest, use simple `import pytest` instead
    "SIM117", # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "N803", # Argument name `SMS` should be lowercase
    "PT006", # Wrong name(s) type in `@pytest.mark.parametrize`, expected `tuple`
    "PT022", # No teardown in fixture `none_transmission_headers_student`, use `return` instead of `yield`
    "DTZ001", # The use of `datetime.datetime()` without `tzinfo` argument is not allowed
    "C414", # Unnecessary `list` call within `sorted()`
    "PLW0602", # Using global for `weekday_titles` but no assignment is done
    "DTZ002", # The use of `datetime.datetime.today()` is not allowed, use `datetime.datetime.now(tz=)` instead
    "S106", # Possible hardcoded password: "123"
    "N802", # Function name `test_InstructorAgreementRequestDTO_convert_to_xml` should be lowercase
    "PT018", # Assertion should be broken down into multiple parts
    "DTZ011", # The use of `datetime.date.today()` is not allowed, use `datetime.datetime.now(tz=).date()` instead
    "DTZ005", # The use of `datetime.datetime.now()` without `tz` argument is not allowed
    "PLR0915", # Too many statements (67/50)
    "PTH118", # `os.path.join` should be replaced by foo_path / "bar"
    "PTH100", # `os.path.abspath` should be replaced by `.resolve()`
    "PTH120", # `os.path.dirname` should be replaced by `.parent`
    "SIM105", # Use `contextlib.suppress(AttributeError, KeyError)` instead of try-except-pass
    "S110", # `try`-`except`-`pass` detected, consider logging the exception
    "B005", # Using `.strip()` with multi-character strings is misleading the reader
    "UP012", # Unnecessary call to `encode` as UTF-8
    "PT019", # Fixture `_http_request` without value is injected as parameter, use `@pytest.mark.usefixtures` instead
    "PT011", # `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    "D411", # Missing blank line before section ("Example")
    "D412", # No blank lines allowed between a section header and its content ("Example")
    "SIM300", # Yoda conditions are discouraged, use `str(exc.type.__name__) == "ValidationError"` instead
    "B008", # Do not perform function call `datetime.timedelta` in argument defaults
    "B006", # Do not use mutable data structures for argument defaults
    "PT012", # `pytest.raises()` block should contain a single simple statement
    "S107", # Possible hardcoded password: "secret"
    "UP015", # Unnecessary open mode parameters
    "D211",
    "D203",
]

[tool.ruff.isort]
combine-as-imports = true


[tool.autopep8]
max_line_length = 120

[tool.black]
line-length = 120
target-version = ['py310']

[tool.pytest.ini_options]
testpaths = ["tests"]
